1.分清楚客户端和服务器端干什么。
	* 客户端
		一、向服务器发送数据
			1.黑窗口运行java代码，不断访问服务器端（向服务器发送数据）。
				> 数据：
				1.客户端主系统的ip（最后又方法直接获取，不用放到date字节数组上）
				2.主系统名称（ClientBean.name.getBytes(),不是从数据库获得，从配置文件获得）
				2.主系统的版本号
				3.字节数组的用于识别的头？字节数组的校验？
		二、接收服务器发来的数据
			1.接收服务器的数据，根据返回的字节数组的第一位（标识版本号相同还是不同）来判断版本是否相同。
			2.如果相同（字节数组第一位为0），不做任何操作。
			3.如果不相同（字节数组第一位为1），把第二位到结尾的字节数组通过ObjectInputStream#readObject读到内存，强转。
			4.关闭主系统进程。使用Runtime.getRuntime得到实例。runtime.exec(cmd命令)。同时还有Process抽象类，
			      具体看APIDemo
			5.文件替换。遍历每个Set<UpdateFile>,把里面的输入流输入到UpdateFile里面的path（这个是相对路径，
			      所以需要字符串拼接）。
			6.开启主系统进程。使用Runtime.getRuntime()得到实例，runtime.exec(cmd命令)。
		三、配置文件
			1.通过配置文件获得主系统的根路径。与后面通过UpdateFile获得的path字符串拼接获得要更新的文件的绝对路径。
			2.主系统的名称（标识）

	* 服务器端
		一、更新
			1.获取客户端的ip
			2.比较版本号
			3.如果版本号相同，不处理（或者返回一个标识用的字节数组,长度为1，字节数组内容为0）。选择发送用于标识版本号相同的字节数组。
			4.如果版本不相同，从数据库服务器获取实体对象VerUpdate（String 版本号，Set<UpdateFile>下载文件，
				其中下载文件（UpdateFile）包括（File 文件或者File文件的输入流，String 要存储到客户端的路径））
				实现序列化接口可以在网络上传输对象的字节序列。
				-------------
				序列化：把对象写到本地硬盘的一个文件上。通过ObjectInputStream和ObjectOutputstream来读写对象。
				反序列化：把发送过来的文件（硬盘）的字节数组通过ObjectInputstream变成对象。再强转。
				一般存对象的文件后缀是.objcet。可以把多个对象写到一个文件中。
				详情看ObjectStreamDemo。
				----------
			5.远程关闭客户端主程序（根据前面获取的ip）。不用了，让客户端自己做。
			6.向该客户端发送标识(用于标识发过来的是更新数据，长度为1，字节数组内容为1)+实体对象的字节数组。
			7.修改数据库中的ClientBean对应的表中的外键verid。
		二、向数据库存储更新文件
			1.实体类。
			VerUpdate --- UpdateFile 一对多关系,双向关联
			ClientBean --- VerUpdate 多对一关系，双向关联
			1.1 Verupdate(id<pk> Integer 自增长策略, verision varchar)
					从数据库获取对象时也获取id，虽然没用，但是配置方便。
				Integer id;
				String version;
				Set<UpdateFile> updateFileSet;
			1.2 UpdateFile(id<pk> Integer 自增长策略, file/inputstream mediumBlob,path varchr, verid<fk> Integer)
				Integer id;
				InputStream updatefile;
				String path;
				VerUpdate verupdate;//小心死循环。
			1.3 ClientBean(id<pk> Integer 自增长,name varchar, verid<fk> Integer);
			2.流程。
			2.1 从更新系统的后台主页面中点击“发布更新”，跳转到“发布更新”的页面
			2.2 用表单形式填写版本号(text)
			2.2 用表单形式选择“更新文件”(file)和“路径”(text)。这里的路径是UpdateFile的path。
				> 问题：上传到数据库的文件太多，表单不够怎么办？怎么实现点击“添加”，表单中多一个file表单项和text表单项？
				> 解决：一个表单就只能上传一个file表单项和text表单项（UpdateFile）
			2.3 点击提交完成一个更新文件上传到数据库。
			2.4 跳转到“发布更新”的页面
		三、向指定客户端ip发送更新文件（Verupdate）
			1.在更新系统的后台主页面点击“指定客户端更新”，跳转到“指定客户端更新”的页面
			2.表单形式输入指定ip和版本（ip对应于要更新的客户端的ip，版本，通过版本查找到对应的VerUpdate对象(里面包括了更新文件等)）
			3.点击“更新”（把VerUpdate对象序列化，然后获得对象文件的输入流，变成字节数组，并添加标识位长度为1，字节为1。发送到指定ip）
			4.跳转到“指定客户端更新”的页面
		四、查看指定客户端的主系统版本
			1.在在更新系统的后台主页面点击“指定客户端更新”，跳转到“指定客户端更新”的页面
			2.输入终端名称(ClientBean.name)
				> ip或者终端（客户端）编号（ip变化怎么办，数据库来张终端编号与ip地址的对应表？经常要更新表？用网卡地址？怎么获取网卡地址？）
			3.点击“查看”，提交表单，查看当前终端（客户端）当前版本。	
			
2.分包
	-- jsp：更新系统的后台页面（主页面和其他页面）
	-- web.action：控制器，调度jsp和业务
	-- domain：ClientBean、VerUpdate、UpdateFile
	-- service：处理业务
	-- dao：操作数据库，更新服务器和更新系统后台需要调用
	-- server：接收客户端发来的字节数组，判断后处理。调用dao层对象，从数据库获得数据。调用dao层对象，修改数据库中客户端的版本号
	-- client：向UpdateServer发送数据，接收UpdateServer发来的数据。并截取字节数组做判断，然后处理。
	
3.导包和导入配置文件	

4.完成dao层
	完成记得在beans.xml中关闭自动建表---后面可能还会添加表，等项目完成再关闭。
	
5.完成UpdateServer和UpdateClient

6.B/S
  B --- 浏览器 --- 后台管理页面
  S --- 服务器 --- Tomcat服务器
  
  * 后台管理页面
  	> index.jsp  主页面 
  	> login.jsp  登录页面。最后再做，或者不做。
  	> release.jsp 发布更新页面。
  	> serachClient.jsp 查询客户端版本页面。
  	> specificUpdate.jsp 指定客户端指定版本进行更新
  	
  * release.jsp
  ------- 上传小文件   --------------
  	1.输入版本号
  		> 校验版本号是否已存在，已存在不给发布。
  		> 不存在进入下一步
  	2.输入该版本的描述
  	3.选择上传文件
  	4.指定上传文件到终端的相对于主系统根目录的路径
  ----------------------------------
  
  ------- 版本追加新文件 --------------
  	给已存在的版本添加新文件
  	1.输入版本号
  		> 校验版本号，必须是已存在的
  		> 已存在进入下一步
  	2.输入该版本描述
  	3.选择上传文件
  	4.指定上传文件到终端的相对于主系统的根目录的路径
  
  --------------------------------
  -------- 上传大文件 ------------------
  	0.自己将大文件分割。
  		原文件名为：xxx.abc
  		分割后：
  		xxx_1.part
  		xxx_2.part
  		...
  		xxx_n.part
  		splitFile.properties
  	1.输入版本号
  		> 要求版本号已存在  ？？
  		> 已存在进入下一步
  	2.选择上传文件。文件名格式为:
  		splitFile.properties(必须第一个)
  		xxx_1.part
  		xxx_2.part
  		xxx_n.part                   
	3.点击添加文件完成上传
	------------------------------------------
	