1. vo(value object)
	- vo是由new创建，gc回收的对象
	- vo存活的目的就是为了提供一些数据，例如User form。就是简单封装表单数据，然后获得vo里面的数据，再做其他
		操作（根据主键查找，直接插入到数据库）。
	- vo的属性是对应业务逻辑所需要的数据，而po的属性是对应数据库表的字段
	
2. po(persistent object)
	- po是由ORM产生出来的概念，如果没有ORM就没有po。po就是由数据库表映射出来的对象。这个对象的属性的值和数据库
		表中记录的字段保持相同。

3. to(transfer object)
	- 不同应用程序之间传输的对象
	
4. bo(business object) ？？？
	- 表示应用程序领域内“事物”的所有实体类。这些实体类驻留在服务器上，并利用服务类来协助完成它们的职责。 
	- 主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。比如一个简历，有教育经历、工作经历、社会关系等等。
		我们可以把教育经历对应一个PO，工作经历对应一个PO，社会关系对应一个PO。建立一个对应简历的BO对象处理简历，每个BO包含这些PO。
		这样处理业务逻辑时，我们就可以针对BO去处理。
	
5. pojo(plain ordinary java object)
	- 就是只有getter和setter的普通java类，这个名字用于区分ejb的javabean概念
	
6. javabean
	- 就是只有getter和setter的普通java类

7. dto(data transfer object)
	- 主要用于远程调用等需要大量传输对象的地方
	- 比如我们一张表有100个字段，那么对应的PO就有100个属性。但是我们界面上只要显示10个字段，客户端用WEB service来获取数据，
		没有必要把整个PO对象传递到客户端，这时我们就可以用只有这10个属性的DTO来传递结果到客户端，这样也不会暴露服务端表结构.
		到达客户端以后，如果用这个对象来对应界面显示，那此时它的身份就转为VO.
		
8. qo(query object)？？？
	- 用于查询的对象？？
	- hibernate的criteria