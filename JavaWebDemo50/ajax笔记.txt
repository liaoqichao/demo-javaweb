1.ajax是什么
	目的：增强用户体验。
	* asynchronous JavaScript and xml : 异步的js和xml
	* 它能使用js访问服务器，而且是异步访问。
	* 服务器给客户端的响应就是一个完整的HTML页面，但是在ajax中因为是局部刷新，服务器就不用再响应整个页面，而只是数据。
		数据:	> text:纯文本
			> xml: 一种数据交换格式，可以封装用来服务器响应给页面的数据(对象)。
			> json:它是js提供的数据交换格式。
			
2.异步交互和同步交互
	> 同步交互 : 
		* 发一个请求后就等待服务器响应结束才能访问第二个请求。中间这段时间对于别的请求就是一个字"卡"。
		* 刷新的是整个页面。
	> 异步交互 : 
		* 发送一个请求后，无需等待服务器的响应，然后就可以发送第二个请求。 
		* 可以使用js接收服务器的响应，然后使用js来局部刷新。(局部刷新，例如  oNode.innerHTML("HELLO"); 
		
3.ajax的应用场景
	> 百度的搜索块：(输入"传"，立刻把"传"送给服务器，返回10个和"传"相关的最热词语,用下拉菜单来显示，这时候页面没有刷新，但是局部有刷新)。
	> 用户注册时校验用户名是否被注册
	
4.ajax的优缺点
	> 优点： 
		* 异步交互，增强用户的体验。
		* 因为服务器无须响应整个页面，只需要响应部分内容，从而减少服务器的压力。
	> 缺点：
		* ajax不能应用在所有场景
		* ajax增加了对服务器的访问次数，给服务器带来了压力。
		
5.ajax第一例:ajax发送异步GET请求。
	> 第一步：得到XMLHttpRequest
		* 大多数浏览器都支持: var xmlHttp = new XMLHttpRequest();
		* IE6.0 : var xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
		* IE5.5以及更早： var xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
		
		* 编写创建XMLHttpReqest对象的函数
			function createXMLHttpRequest(){
				try{
					return new XMLHttpRequest();
				} 
				catch (e){
					try{
						return new ActiveXObject("Msxml2.XMLHTTP");
					}
					catch (e){
						try{
							return new ActiveXObject("Microsoft.XMLHTTP");
						}
						catch(e){
							alert("你用的是什么浏览器??/");
							throw e2;
						}
					}
				}
			}
		> 第二步：打开与服务器的链接
			* xmlHttp.open();需要三个参数
			* 请求方式：get或者post
			* 请求的url：指定服务器端的资源。例如：/JavaWebDemo50/AServlet
			* 请求是否为异步：true表示发送异步请求。
			
			xmlHttp.open("GET","/JavaWebDemo50/AServlet",true);
		> 第三步：发送请求
			* xmlHttp.send(null);如果不给参数null可能会有部分浏览器无法发送。
			* 参数就是请求体内容，如果是get请求必须给null。如果是post，xmlHttp.send("username=zhangSan&password=123");
		> 第四步：
			* 在xmlHttp对象的一个事件上注册监听器：onreadystatechange，监听的是xmlHttp状态。
				a.xmlHttp中一共有5个状态：
					0状态：刚创建，没有调用open方法。
					1状态：请求开始，open调用，send没有被调用。
					2状态：调用完了send方法
					3状态：服务器已经开始响应，但不表示响应结束。
					4状态：服务器响应结束。(通常只关心这个状态)
			* 得到xmlHttp对象的状态
				var int_state = xmlHttp.readyState;//可能是0,1,2,3,4
			* 得到服务器响应的状态码
				var status = xmlHttp.status;//200,404,500
			* 得到服务器响应的内容
				var content = xmlHttp.responseText;//得到服务器响应的文本格式内容，它是字符串
				var content = xmlHttp.responseXML;//得到服务器响应的xml响应内容，它是document对象
			代码：
				xmlHttp.onreadystatechange = function(){	//xmlHttp的5种状态转变时都会调用这个方法
					if(xmlHttp.readyState == 4 && xmlHttp.status == 200){//双重判断：判断是否为4状态，还要判断是否为200
						//获取服务器响应内容
						var text = xmlHttp.responseText();
					}
				};
				
6.ajax第二例:ajax发送异步POST请求(如果发送请求时需要带有参数，一般都用POST请求)
	post请求Content-Type的默认值：application/x-www-form-urlencoded
	但是ajax没有默认值，需要手动设置。
	> open: xmlHttp.open("POST","请求URL","true");
	> 添加一步：设置Content-Type请求头：
		* xmlHttp.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
	> send: xmlHttp.sen("username=zhangSan&password=123");//发送时有参数一般都用post请求,指定请求体
	
7.ajax第三例:注册表单之校验用户是否已注册
	> 编写页面ajax3.jsp，给出注册表单
		* 给用户名文本框添加onblur事件(文本框时区焦点时)的监听器
		* 获取文本框的内容，通过ajax4步发送给服务器，得到相应结果
			* 如果为1,在文本框后显示"用户名已经被注册".
			* 如果为0,什么都不做。
	> 获取客户端传过来的用户名参数
	> 判断是否为itcast
		* 是，返回字符串1(存在)
		* 否,返回字符串0(不存在)
		
8.ajax第四例：响应内容为xml数据，hello world
	与响应内容为文本(字符串)相比，需要修改两个地方
	> 服务器端：
		* 设置ContentType响应头，值为:text/xml;charset=utf-8
	> 客户端：
		* 从xmlHttp.responseText改为xmlHttp.responseXML;//得到的是document对象
		
9.ajax第五例：省市联动

	> 页面	
		<select name="province">
			<option>===请选择省份===</option><%--什么时候加载省份？打开网页的时候就加载--%>
		</select>
		<select name="city">
			<option>===请选择城市===</option><%--什么时候加载城市？选择省份后，加载对应省份的城市--%>
		</select>
	> ProvinceServlet：当页面加载完毕后马上请求这个Servlet
		* 需要加载china.xml文件，把所有省的名称使用字符串发送给客户端。
	> 页面的工作
		* 获取这个字符串，用逗号分隔，得到数组
		* 遍历每个字符串(省份的名称)，使每个字符串创建一个<option>元素添加到<select name="province">中
	
	> CityServlet:当页面选择某个省时，发送请求
		* 得到省份名称，加载china.xml，查询出该省份对应的元素对象，把这个元素转换成xml字符串，发送给客户端
	> 页面的工作
		* 把<select name="city">中的子元素全部删除，处了<option>===请选择城市===</option>
		* 得到服务器的响应结果：document对象
		* 获取所有的<city>子元素，循环遍历得到内容
		* 使用每个City的内容，创建一个option元素，添加到select name="city"中
		
10.XStream――把javabean转换为(序列化为)xml
	核心jar包 xstream-1.4.7
	依赖jar包 xpp3_min-1.1.4c
	> 使用步骤：
		XStream xstream = new XStream();	
		String xmlStr = xstream.toXML(javabean);
	> 使用细节：
		* 别名：把类型对应的元素名修改	xstream.alias("china",List.class);让List类型生成的元素名为china
			xstream.alias("province",Province.class);//domain.Province对应的元素名称为province
		* 使用为属性：默认类的成员生成的是元素的子元素，希望让类的成员生成类的属性。
			xstream.useAttributeFor(Province.class,"name");让Province的成员变成<province>的属性
		* 去除Collection容器的的元素，只需要Collection的内容，而不希望Collection本身也生成一个元素
			xstream.addImplicitCollection(Province.class,"cities");
			让cities成员不生成元素，cities是List类型，它的内容会生成元素
		* 去除类的指定成员，让它不生成指定元素
			xstream.omitField(City.Class,"description");生成的xml中不会生成City中description对应的元素
			
11.json
	json是js提供的一种数据交换格式
	> json的语法
		{}:对象
		属性名必须使用双引号括起来，不可以使用单引号
		属性值:null,数值，字符串，数组(使用[]括起来)，逻辑值(t,f)
	> 应用json
		* var person = {"name":"zhangSan","age"=18,"sex":"male};
		
12.json和XML比较
	可读性：xml更好
	解析难度：json本身就是js对象，所以json更简单
	流行度：XML流行多年，在ajax领域中json更受欢迎
	
13.json-lib
	可以把javabean转换成json串
	> 核心jar包:json-lib.jar
	> 依赖jar包:略。很多
	> 核心类:
		JSONObject --> Map
			方法：
			1.toString,把JSONObject变成json串
			2.	JSONObject map = JSONObject.fromObject(p);//把javabean变成JSONObject,也可以是map
				System.out.println(map.toString());//{"age":23,"name":"zhangSan","sex":"male"}
		JSONArray --> List
			方法：
			1.toString,把JSONArray变成json串
			2.	JSONArray jlsit = JSONArray.fromObject(list);
				System.out.println(jlist.toString());//[{"age":23,"name":"zhangSan","sex":"male"},{"age":26,"name":"liSi","sex":"female"}]
				
14.json的省市联动
	> dao：
		* 查询所有省
		* 通过省的名称所有市
	> service:略
	> web.servlet:
		* 把所有省转换成json发送给客户端
		* 通过获取省名称的参数，然后查询该省下的所有市，转换成json发送给客户端
	> ajax6.jsp
		* 页面加载完成后，访问servlet，得到所有省，然后显示在<select id="province">
		* 页面加载完后,给<select id=province>增加onchange事件，获取省名称，显示所有市，显示在<select id="city">中
		
	***	city表的外键pid是int类型，但是bean里面的是Province类(面向对象)，所以toBean的时候不能赋值过去。需要用到hibernate
	*** 一条记录对应多个对象时，需要使用map来生成多个对象.
		Map<String,Object> map = qr.query(sql,new MapListHandler(),params);
		Province p = CommonsUtils.toBean(map,Province.class);
		City c = CommonsUtils.toBean(map,City.class);
		//但是这样p和c没有关系，所以需要建立关系
		c.setProvince(p);
		p.setCities..?  p的List<City> cities怎么办?
		List<Map<String,Object>> mapList = qr.query(sql,new MapListHandler(),params);